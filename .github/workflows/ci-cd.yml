name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Ensure this matches your repository's main branch name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (improved builder)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

      # Step 5: Deploy to AWS EC2
      - name: Deploy to AWS EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
        run: |
          # Set up SSH for EC2 connection
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

          # SSH into EC2 and deploy the updated Docker image
          ssh -o "StrictHostKeyChecking=no" ubuntu@${{ secrets.HOST }} 'bash -s' << 'EOF'
            set -e  # Exit on error

            echo "ðŸš€ Connecting to EC2 and deploying the new Docker image..."

            # Add ubuntu to Docker group (if not already added)
            sudo usermod -aG docker ubuntu || true

            # Pull the updated Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

            # Stop and remove any container using port 80
            echo "âš™ Stopping and removing old containers..."
            docker ps -q --filter "publish=80" | xargs -r docker stop
            docker ps -aq --filter "publish=80" | xargs -r docker rm

            # Clean up dangling images and unused resources
            echo "ðŸ§¹ Cleaning up Docker system..."
            docker system prune -f

            # Run the new container
            echo "ðŸš€ Running the new container..."
            docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

            # Verify the running container
            echo "âœ… Verifying deployment..."
            docker ps
          EOF

          echo "âœ… Deployment to AWS EC2 completed successfully!"
