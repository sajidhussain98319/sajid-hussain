name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Ensure this matches your repository's main branch name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (improved builder)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub using the secrets stored in GitHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image using Docker Buildx
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

      # Step 5: Deploy the application to AWS EC2
      - name: Deploy to AWS EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
        run: |
          # Set up SSH for connecting to EC2
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Ensure the EC2 host is trusted
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

          # SSH into EC2 and deploy the new Docker image
          ssh -o "StrictHostKeyChecking=no" ubuntu@${{ secrets.HOST }} 'bash -s' << 'EOF'
            set -e  # Exit on error

            # Add the ubuntu user to the Docker group (if not already added)
            sudo usermod -aG docker ubuntu || true

            # Pull the updated Docker image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

            # Stop and remove the previous container (if it exists)
            docker stop flask-app-container || true
            docker rm flask-app-container || true

            # Run the updated Docker container
            docker run -d --name flask-app-container -p 80:80 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          EOF

          echo "âœ… Deployment to AWS EC2 completed successfully!"
