name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate Secrets
        run: |
          [ -z "${{ secrets.DOCKER_USERNAME }}" ] && echo "Missing DOCKER_USERNAME" && exit 1
          [ -z "${{ secrets.DOCKER_PASSWORD }}" ] && echo "Missing DOCKER_PASSWORD" && exit 1
          [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ] && echo "Missing SSH_PRIVATE_KEY" && exit 1
          [ -z "${{ secrets.HOST }}" ] && echo "Missing HOST" && exit 1

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

      - name: Deploy to AWS EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.HOST }} 2>/dev/null | tee -a ~/.ssh/known_hosts
          ssh -o "StrictHostKeyChecking=no" ubuntu@${{ secrets.HOST }} 'bash -s' << 'EOF'
            set -e
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

            # Remove existing container if running
            docker ps -q --filter "name=flask-app-container" | grep -q . && docker stop flask-app-container && docker rm flask-app-container

            # Run updated container
            docker run -d --name flask-app-container -p 80:80 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          EOF
